generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @unique @db.VarChar(255)
  password          String
  firstName         String             @map("first_name")
  lastName          String             @map("last_name")
  phone             String
  geolocation       Geolocation?
  about             String?
  avatars           Avatar[]
  refreshTokens     RefreshToken[]
  verificationCodes VerificationCode[]
  phoneVerification PhoneVerification?
  pastries          Pastry[]
  pastryLikes       PastryLike[]
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  followers         UserFollow[]       @relation("UserFollower")
  following         UserFollow[]       @relation("UserFollowing")

  @@map("users")
}

model Geolocation {
  id        String   @id @default(uuid()) @db.Uuid
  lat       Float
  lng       Float
  userId    String   @unique @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("geolocations")
}

model Avatar {
  id        String   @id @default(uuid()) @db.Uuid
  filename  String   @unique
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("avatars")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model VerificationCode {
  id        String               @id @default(uuid()) @db.Uuid
  code      String               @db.Char(6)
  type      VerificationCodeType
  email     String
  user      User                 @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  @@unique([type, email])
  @@map("verification_codes")
}

enum VerificationCodeType {
  EMAIL_CONFIRMATION
  PASSWORD_RESET
  PHONE_CONFIRMATION
}

model PhoneVerification {
  id         String   @id @default(uuid()) @db.Uuid
  isVerified Boolean  @default(false) @map("is_verified")
  userId     String   @unique @map("user_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("phone_verification")
}

model UserFollow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  follower    User     @relation("UserFollower", fields: [followingId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model Pastry {
  id          String             @id @default(uuid()) @db.Uuid
  name        String
  price       Float
  description String?
  unit        PastryUnit
  contact     PastryContact?
  geolocation PastryGeolocation?
  media       PastryMedia[]
  categories  PastryCategory[]
  likes       PastryLike[]
  userId      String             @map("user_id") @db.Uuid
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  @@map("pastries")
}

model PastryContact {
  id        String   @id @default(uuid()) @db.Uuid
  phone     String
  pastryId  String   @unique @map("pastry_id") @db.Uuid
  pastry    Pastry   @relation(fields: [pastryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pastry_contacts")
}

model PastryGeolocation {
  id        String   @id @default(uuid()) @db.Uuid
  lat       Float
  lng       Float
  pastryId  String   @unique @map("pastry_id") @db.Uuid
  pastry    Pastry   @relation(fields: [pastryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pastry_geolocations")
}

model PastryMedia {
  id        String   @id @default(uuid()) @db.Uuid
  filename  String
  pastryId  String   @map("pastry_id") @db.Uuid
  pastry    Pastry   @relation(fields: [pastryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pastry_media")
}

model PastryCategory {
  id        String             @id @default(uuid()) @db.Uuid
  category  PastryCategoryEnum
  pastryId  String             @map("pastry_id") @db.Uuid
  pastry    Pastry             @relation(fields: [pastryId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("pastry_categories")
}

enum PastryCategoryEnum {
  CAKES_AND_PASTRIES
  COOKIES_AND_BISCUITS
  CHOCOLATE_PRODUCTS
  ICE_CREAM_AND_FROZEN_DESSERTS
  CANDIES_AND_LOLLIPOPS
  BAKED_GOODS_AND_SWEETS
}

enum PastryUnit {
  GRAM
  KILOGRAM
  PIECE
  LITER
}

model PastryLike {
  id        String   @id @default(uuid()) @db.Uuid
  pastryId  String   @map("pastry_id") @db.Uuid
  pastry    Pastry   @relation(fields: [pastryId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([pastryId, userId])
  @@map("pastry_likes")
}
