services:
  db:
    container_name: db
    image: postgres:16.2-alpine
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
      - ./backend/.env.local
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 10

  redis:
    container_name: redis
    image: redis:7.2-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis-data:/redis/data
    command: ["redis-server", "--save", "", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10

  backend:
    container_name: backend
    build:
      context: ./backend/
    env_file:
      - .env
      - ./backend/.env.local
      - ./backend/.env.production
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      db:
          condition: service_healthy
      redis:
          condition: service_healthy
    command: ["sh", "-c", "npx prisma migrate deploy && npm run start:prod"]
    
  proxy:
    container_name: proxy
    image: nginx:1.24-alpine-slim
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    depends_on:
      backend:
        condition: service_started
    ports:
      - "80:80"
    networks:
      - app-network


networks:
  app-network:

volumes:
  db-data:
  redis-data: